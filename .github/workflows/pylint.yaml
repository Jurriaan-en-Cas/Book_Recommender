name: Pylint

on:
  push:
    branches: main
  pull_request:
    branches: '**'


jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Bootstrap poetry
      run: |
        curl -sSL https://install.python-poetry.org | python - -y
    - name: Update PATH
      run: export PATH=$HOME/.local/bin:$PATH
    - name: Configure poetry
      run: poetry config virtualenvs.in-project true
    - name: Set up cache
      uses: actions/cache@v3
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      run: |
        # `timeout` is not available on macOS, so we define a custom function.
        [ "$(command -v timeout)" ] || function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }
        # Using `timeout` is a safeguard against the Poetry command hanging for some reason.
        timeout 10s poetry run pip --version || rm -rf .venv
    - name: Check lock file
      run: poetry lock --check
    - name: Install dependencies
      run: poetry install --with dev
    - name: Analysing the code with pylint
      run: |
        pylint $(git ls-files '*.py')